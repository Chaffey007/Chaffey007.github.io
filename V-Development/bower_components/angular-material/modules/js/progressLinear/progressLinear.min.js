/*!
 * AngularJS Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.1.5
 */
(function(b,a,d){c["$inject"]=["$mdTheming","$mdUtil","$log"];a.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",c);function c(h,f,o){var n="determinate";var e="indeterminate";var g="buffer";var k="query";var l="_md-progress-linear-disabled";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:m};function m(q,r,p){q.attr("aria-valuemin",0);q.attr("aria-valuemax",100);q.attr("role","progressbar");return i}function i(B,u,w){h(u);var s;var A=w.hasOwnProperty("disabled");var t=f.dom.animator.toCss;var y=a.element(u[0].querySelector(".md-bar1"));var x=a.element(u[0].querySelector(".md-bar2"));var p=a.element(u[0].querySelector(".md-container"));u.attr("md-mode",v()).toggleClass(l,A);q();r();function r(){w.$observe("value",function(D){var C=j(D);u.attr("aria-valuenow",C);if(v()!=k){z(x,C)}});w.$observe("mdBufferValue",function(C){z(y,j(C))});w.$observe("disabled",function(C){if(C===true||C===false){A=!!C}else{A=a.isDefined(C)}u.toggleClass(l,A);p.toggleClass(s,!A)});w.$observe("mdMode",function(C){if(s){p.removeClass(s)}switch(C){case k:case g:case n:case e:p.addClass(s="md-mode-"+C);break;default:p.addClass(s="md-mode-"+e);break}})}function q(){if(a.isUndefined(w.mdMode)){var C=a.isDefined(w.value);var E=C?n:e;var D="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";u.attr("md-mode",E);w.mdMode=E}}function v(){var C=(w.mdMode||"").trim();if(C){switch(C){case n:case e:case g:case k:break;default:C=e;break}}return C}function z(E,D){if(A||!v()){return}var F=f.supplant("translateX({0}%) scale({1},1)",[(D-100)/2,D/100]);var C=t({transform:F});a.element(E).css(C)}}function j(p){return Math.max(0,Math.min(p||0,100))}}})(window,window.angular);