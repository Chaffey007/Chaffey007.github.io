/*!
 * AngularJS Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.1.5
 */
(function(e,f,g){h["$inject"]=["$mdTheming","$mdUtil","$log"];f.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",h);function h(s,u,a){var b="determinate";var v="indeterminate";var t="buffer";var p="query";var d="_md-progress-linear-disabled";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:c};function c(j,i,k){j.attr("aria-valuemin",0);j.attr("aria-valuemax",100);j.attr("role","progressbar");return r}function r(l,F,D){s(F);var H;var m=D.hasOwnProperty("disabled");var G=u.dom.animator.toCss;var o=f.element(F[0].querySelector(".md-bar1"));var C=f.element(F[0].querySelector(".md-bar2"));var k=f.element(F[0].querySelector(".md-container"));F.attr("md-mode",E()).toggleClass(d,m);j();i();function i(){D.$observe("value",function(w){var x=q(w);F.attr("aria-valuenow",x);if(E()!=p){n(C,x)}});D.$observe("mdBufferValue",function(w){n(o,q(w))});D.$observe("disabled",function(w){if(w===true||w===false){m=!!w}else{m=f.isDefined(w)}F.toggleClass(d,m);k.toggleClass(H,!m)});D.$observe("mdMode",function(w){if(H){k.removeClass(H)}switch(w){case p:case t:case b:case v:k.addClass(H="md-mode-"+w);break;default:k.addClass(H="md-mode-"+v);break}})}function j(){if(f.isUndefined(D.mdMode)){var y=f.isDefined(D.value);var w=y?b:v;var x="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";F.attr("md-mode",w);D.mdMode=w}}function E(){var w=(D.mdMode||"").trim();if(w){switch(w){case b:case v:case t:case p:break;default:w=v;break}}return w}function n(x,y){if(m||!E()){return}var w=u.supplant("translateX({0}%) scale({1},1)",[(y-100)/2,y/100]);var z=G({transform:w});f.element(x).css(z)}}function q(i){return Math.max(0,Math.min(i||0,100))}}})(window,window.angular);